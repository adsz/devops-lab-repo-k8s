---
- name: Ensure /etc/hosts has all master entries
  lineinfile:
    path: /etc/hosts
    line: "{{ hostvars[item]['ansible_host'] }} {{ item }}"
    state: present
  loop: "{{ groups['k8s_masters'] }}"
  tags: kubernetes

- name: Add control plane endpoint to /etc/hosts
  lineinfile:
    path: /etc/hosts
    line: "{{ control_plane_endpoint.split(':')[0] }} k8s-api.local"
    state: present
  tags: kubernetes

- name: Install dependencies
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
    state: present
  tags: kubernetes

- name: Install containerd
  apt:
    name: containerd
    state: present
  tags: kubernetes

- name: Ensure containerd configuration directory exists
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'
  tags: kubernetes

- name: Generate containerd default config
  shell: containerd config default > /etc/containerd/config.toml
  notify: restart_containerd
  tags: kubernetes

- name: Patch containerd config for sandbox image
  replace:
    path: /etc/containerd/config.toml
    regexp: 'sandbox_image = ".*"'
    replace: 'sandbox_image = "{{ containerd_sandbox_image }}"'
  notify: restart_containerd
  tags: kubernetes

- name: Set SystemdCgroup = true in containerd config
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'
  notify: restart_containerd
  tags: kubernetes

- name: Enable and start containerd
  systemd:
    name: containerd
    enabled: yes
    state: started
  tags: kubernetes

- name: Add Kubernetes apt key
  get_url:
    url: "{{ kubernetes_apt_key_url }}"
    dest: /etc/apt/trusted.gpg.d/kubernetes.asc
    mode: '0644'
  tags: kubernetes

- name: Add Kubernetes apt repository
  apt_repository:
    repo: "{{ kubernetes_apt_repo }}"
    state: present
    filename: kubernetes
  tags: kubernetes

- name: Install Kubernetes components
  apt:
    name:
      - kubeadm={{ kubernetes_version }}
      - kubelet={{ kubernetes_version }}
      - kubectl={{ kubernetes_version }}
    state: present
    update_cache: yes
  tags: kubernetes

- name: Hold Kubernetes packages
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubeadm
    - kubelet
    - kubectl
  tags: kubernetes

- name: Enable kubelet service
  systemd:
    name: kubelet
    enabled: yes
    daemon_reload: yes
  tags: kubernetes

- name: Disable swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0
  changed_when: ansible_swaptotal_mb > 0
  tags: kubernetes

- name: Remove swap from /etc/fstab
  lineinfile:
    path: /etc/fstab
    regexp: '^.*\\sswap\\s'
    state: absent
  tags: kubernetes

- name: Load kernel modules
  modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - overlay
    - br_netfilter
  tags: kubernetes

- name: Persist kernel modules
  copy:
    content: |
      overlay
      br_netfilter
    dest: /etc/modules-load.d/containerd.conf
    mode: '0644'
  tags: kubernetes

- name: Configure sysctl for Kubernetes
  template:
    src: kubernetes-sysctl.conf.j2
    dest: /etc/sysctl.d/99-kubernetes.conf
    mode: '0644'
  notify: apply_sysctl
  tags: kubernetes

- name: Apply sysctl settings
  command: sysctl --system
  changed_when: true
  tags: kubernetes

# - name: Pre-pull kubeadm images
#   command: kubeadm config images pull --kubernetes-version={{ kubernetes_semver }}
#   retries: 3
#   delay: 10
#   register: image_pull
#   until: image_pull.rc == 0
#   tags: kubernetes

- name: Check if cluster is already initialized
  stat:
    path: /etc/kubernetes/admin.conf
  register: kubeconfig_exists
  tags: kubernetes

- name: Reset any existing Kubernetes installation if needed
  block:
    - name: Check for existing Kubernetes manifests
      stat:
        path: /etc/kubernetes/manifests
      register: manifests_dir

    - name: Run kubeadm reset if Kubernetes is partially installed
      command: kubeadm reset -f
      when: manifests_dir.stat.exists
      ignore_errors: true

    - name: Clean up Kubernetes directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/kubernetes
        - /var/lib/kubelet
        - /var/lib/etcd
      when: manifests_dir.stat.exists

    - name: Stop all Kubernetes related services
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      loop:
        - kubelet
        - containerd
      ignore_errors: true
      when: manifests_dir.stat.exists

    - name: Start containerd back
      systemd:
        name: containerd
        state: started
        enabled: yes
      when: manifests_dir.stat.exists

  when: inventory_hostname == groups['k8s_masters'][0] and not kubeconfig_exists.stat.exists
  tags: kubernetes

- name: Initialize first master node
  block:
    - name: Ensure /etc/kubernetes directory exists
      file:
        path: /etc/kubernetes
        state: directory
        mode: '0755'
      tags: kubernetes

    - name: Generate certificate key for control plane
      command: kubeadm certs certificate-key
      register: cert_key_output
      tags: kubernetes

    - name: Set certificate key fact
      set_fact:
        certificate_key: "{{ cert_key_output.stdout }}"
      tags: kubernetes

    - name: Generate kubeadm config file for first master
      template:
        src: kubeadm-config.yaml.j2
        dest: /etc/kubernetes/kubeadm-config.yaml
        mode: '0644'
      tags: kubernetes

    - name: Initialize Kubernetes first master node
      command: kubeadm init --config=/etc/kubernetes/kubeadm-config.yaml --upload-certs
      register: kubeadm_init
      tags: kubernetes

    - name: Extract join command from init output
      set_fact:
        join_command: "{{ kubeadm_init.stdout | regex_search('kubeadm join [^\\n]*', multiline=True) }}"
      when: kubeadm_init.stdout is defined
      tags: kubernetes

    - name: Extract control plane join command
      set_fact:
        control_plane_join_command: "{{ kubeadm_init.stdout | regex_search('kubeadm join [^\\n]* --control-plane --certificate-key [a-f0-9]+', multiline=True) }}"
      when: kubeadm_init.stdout is defined
      tags: kubernetes

    - name: Store join commands
      copy:
        content: |
          # Worker join command
          {{ join_command }}
          
          # Control plane join command
          {{ control_plane_join_command }}
        dest: /tmp/kubeadm-join-commands.txt
        mode: '0600'
      when: join_command is defined
      tags: kubernetes

  when: inventory_hostname == groups['k8s_masters'][0] and not kubeconfig_exists.stat.exists
  tags: kubernetes

- name: Join additional master nodes
  block:
    - name: Wait for first master API server to be ready
      wait_for:
        host: "{{ control_plane_endpoint.split(':')[0] }}"
        port: 6443
        timeout: 300
      tags: kubernetes

    - name: Fetch control plane join command from first master
      slurp:
        src: /tmp/kubeadm-join-commands.txt
      register: join_commands_content
      delegate_to: "{{ groups['k8s_masters'][0] }}"
      tags: kubernetes

    - name: Extract control plane join command
      set_fact:
        control_plane_join_cmd: "{{ (join_commands_content['content'] | b64decode).split('\n') | select('match', '.*--control-plane.*') | list | first }}"
      tags: kubernetes

    - name: Join additional master node to cluster
      command: "{{ control_plane_join_cmd }}"
      register: join_result
      retries: 3
      delay: 30
      until: join_result.rc == 0
      tags: kubernetes

  when: inventory_hostname != groups['k8s_masters'][0] and not kubeconfig_exists.stat.exists
  tags: kubernetes

- name: Setup kubectl for ansible user
  block:
    - name: Create kube config directory for ansible user
      file:
        path: /home/ansible/.kube
        state: directory
        owner: ansible
        group: ansible
        mode: '0700'
      tags: kubernetes

    - name: Copy admin.conf for ansible user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ansible/.kube/config
        owner: ansible
        group: ansible
        mode: '0600'
        remote_src: yes
      tags: kubernetes

  tags: kubernetes

- name: Wait for Kubernetes API server to be available
  command: kubectl get nodes
  environment:
    KUBECONFIG: /home/ansible/.kube/config
  register: api_check
  retries: 30
  delay: 10
  until: api_check.rc == 0
  when: inventory_hostname == groups['k8s_masters'][0]
  tags: kubernetes

- name: Install Calico CNI (only on first master)
  command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/calico.yaml
  environment:
    KUBECONFIG: /home/ansible/.kube/config
  retries: 5
  delay: 10
  register: calico_apply
  until: calico_apply.rc == 0
  when: inventory_hostname == groups['k8s_masters'][0]
  tags: kubernetes

- name: Generate worker join command (only on first master)
  command: kubeadm token create --print-join-command
  register: worker_join_command
  when: inventory_hostname == groups['k8s_masters'][0]
  tags: kubernetes

- name: Save worker join command (only on first master)
  copy:
    content: "{{ worker_join_command.stdout }}"
    dest: /home/ansible/k8s-worker-join-command.sh
    owner: ansible
    group: ansible
    mode: '0700'
  when: inventory_hostname == groups['k8s_masters'][0] and worker_join_command.stdout is defined
  tags: kubernetes